#!/usr/bin/env ruby
#
# prints sbt out and collects incremental build errs in a file
#

FIFO='/tmp/sbt.fifo'
ERRS='/tmp/sbt.errs'

$recent_errors = []

def write_recent_errors
  File.open(ERRS, 'w') do |f|
    $recent_errors.each do |line|
      f.puts(line)
    end
  end
  $stderr.puts '-' * 80
end


if (ENV['SBT_ERRORS_RUNNING'].nil?) then
  ENV['SBT_ERRORS_RUNNING']='1'
  puts "Starting with tee #{$0}"
  $stdout.flush

  if (!File.exists?(FIFO)) then
    system("mkfifo #{FIFO}")
  end

  pTee = fork do
    exec("tee #{FIFO}")
  end
  Process::detach(pTee)

  exec($0)
end


File.open(FIFO, 'r') do |input|
  input.each_line do |line|
    line = line.gsub(/\x1b\[([0-9]+;)?[0-9]+m/, '') # strip out ascii colors

    if (/Waiting for source changes/.match(line)) then
      write_recent_errors
      $recent_errors = []
    elsif (/\[error\]/.match(line)) then
      $recent_errors << line
    end
  end
end
