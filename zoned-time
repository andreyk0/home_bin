#!/usr/bin/env stack
{- stack
   --resolver lts-14.17
   --install-ghc
   --silent
   script
   --package base
   --package optparse-applicative
   --package time
-}


{-# LANGUAGE RecordWildCards #-}


import           Control.Monad
import           Data.List
import           Data.Time
import           Options.Applicative


data Args = Args { argTz    :: TimeZone
                 , argTimes :: [ZonedTime]
                 } deriving (Show)


parseArgs :: Parser Args
parseArgs = Args
     <$> option parseTimeZoneArg
         ( long "time-zone"
        <> short 'z'
        <> value utc
        <> showDefault
        <> help "Target time zone." )
     <*> many (argument parseTimeArg (metavar "ISO8601Dates..."))


parseTimeZoneArg :: ReadM TimeZone
parseTimeZoneArg = eitherReader $ \tzName ->
  let maybeTz = find (\tz -> timeZoneName tz == tzName) supportedZones
   in case maybeTz
        of Nothing -> Left $ "Unable to find time zone " <> tzName <> " in the list of supported zones " <> show supportedZones
           Just tz -> Right tz


parseTimeArg :: ReadM ZonedTime
parseTimeArg = eitherReader $ \tsStr ->
  case pTime iso8601FmtStr1 tsStr <|>
       pTime iso8601FmtStr2 tsStr <|>
       pTime inputFmtStr1 tsStr <|>
       pTime inputFmtStr2 tsStr
    of Nothing -> Left $ "failed to parse " <> tsStr
       Just t  -> Right t
  where
    pTime = parseTimeM False defaultTimeLocale


supportedZones :: [TimeZone]
supportedZones = utc : knownTimeZones defaultTimeLocale

iso8601FmtStr1:: String
iso8601FmtStr1 = "%FT%T%Z"

iso8601FmtStr2:: String
iso8601FmtStr2 = "%FT%T%z"

inputFmtStr1:: String
inputFmtStr1 = "%F %T %Z"

inputFmtStr2:: String
inputFmtStr2 = "%a %e %b %Y %T %P %Z"


main:: IO ()
main = execParser opts >>= runMain
  where
    opts = info (helper <*> parseArgs)
      ( fullDesc
     <> progDesc ("Converts given time to different time zone. Supported time zones: " <> show supportedZones)
     <> header "Converts given time to different time zone." )



runMain
  :: Args
  -> IO ()
runMain Args{..} = do
  zonedNow <-getZonedTime
  forM_ (if null argTimes then [zonedNow] else argTimes) $ \zt -> do
    let zt' = utcToZonedTime argTz $ zonedTimeToUTC zt
    putStrLn $ formatTime defaultTimeLocale iso8601FmtStr2 zt'
